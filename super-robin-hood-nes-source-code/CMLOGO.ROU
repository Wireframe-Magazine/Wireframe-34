;
;;CM_FRAMES	EQU $00
;;	VAR CM_FLAGS,1	;	EQU $0200
;;	VAR CM_POWERUP,1	;	EQU $0201
;CM_USERNMI	EQU 1
;CM_SPAGE	EQU $0300
;CM_YEAR	EQU 1991
;
;	if absolutely=1
;
;
;CM_SYPOS	EQU CM_SPAGE
;CM_SDATA	EQU CM_SPAGE+1
;CM_SCTRL	EQU CM_SPAGE+2
;CM_SXPOS	EQU CM_SPAGE+3
;
;;zero page
;
;CM_STINDX	EQU 1
;CM_COLINDX	EQU 2
;
;;keep these 5 bytes in order...!
;CM_YSCRPOS	EQU 3
;CM_TIME	EQU 4
;CM_STADRL	EQU 5
;CM_CODEXPOS	EQU 6
;CM_CODEYPOS	EQU 7
;
;;;CM_STADRH	EQU 8
;;;CM_STCHAR	EQU 9
;;;CM_TIMEIN	EQU 10
;;;CM_TIMEOUT	EQU 11
;
;CM_TEMP1	EQU 12
;CM_TEMP2	EQU 13
;CM_TEMP3	EQU 14
;CM_TEMP4	EQU 15
;
;CM_ADR1	EQU 16
;CM_ADR1L	EQU 16
;CM_ADR1H	EQU 17
;
;CM_NUPZBUF	EQU 18	;eight bytes
;
;
;
;CM_LOGO
;	LDX #$00
;	STX $2000
;	STX $2001
;
;!55	LDA #$00
;	STA 0,X
;	LDA #$FF
;	STA CM_SPAGE,X
;	INX
;	BNE !55
;
;;powerup/reset detect & set nmi to ours
;
;	LDX #$97
;
;	LDA CM_FLAGS
;	AND #$3F
;	CMP #4
;	ORA #$40
;	BCS !POWERUP
;
;	CPX CM_POWERUP
;	BEQ !RESET
;!POWERUP
;	STX CM_POWERUP
;	LDA #$00
;!RESET
;	STA CM_FLAGS
;
;
;;setup
;
;	LDX #$04
;!IN	LDA CM_INITTAB,X
;	STA CM_YSCRPOS,X
;	DEX
;	BPL !IN
;
;
;;download characters
;
;	JSR CM_CHARACTERS
;	
;;cls
;
;	LDA #$20
;	STA $2006
;	LDX #$00
;	STX $2006
;	LDY #$10
;
;	TXA
;!CV0	STA $2007
;	DEX
;	BNE !CV0
;	DEY
;	BNE !CV0
;
;	;assume X=0...
;
;
;;print 'AB'
;
;!AB2
;	LDA #$22
;	STA $2006
;	LDA CM_ABMAP,X
;	STA $2006
;	INX
;
;	LDY #21
;!AB1	LDA CM_ABMAP,X
;	STA $2007
;	INX
;	DEY
;	BNE !AB1
;
;!AB11
;	CPX #21*3
;	BCC !AB2
;
;
;;'AB' attribute patch
;
;	LDA #$23
;	STA $2006
;	LDA #$E0
;	STA $2006
;
;	LDY #3
;
;	LDA #$50
;!AB5	LDX #8
;!AB6	STA $2007
;	DEX
;	BNE !AB6
;
;	LDA #$55
;
;	DEY
;	BNE !AB5
;
;	;and 'TM' atr
;
;	LDY #$23
;	STY $2006
;	LDY #$CD
;	STY $2006
;	;LDA #$55
;	STA $2007
;
;
;;sfx setup
;
;	LDX #$13
;	LDA #$00
;!CSFX	STA $4000,X
;	DEX
;	BPL !CSFX
;
;;nmi on
;	LDA #$80
;	STA $2000
;
;;main loop
;
;CM_LOOP
;	JSR CM_VBLANK
;
;;sfx
;	LDA #$0F
;	STA $4015
;
;	LDX CM_FRAMES
;
;	TXA
;	AND #1
;	STA CM_TEMP1
;
;;noise freq
;
;	CPX #CM_NOISESTART
;	BCS !N2
;	TXA
;	LSR
;	BPL !N0
;!N2
;	TXA
;	LSR
;	LSR
;	LSR
;	TAY
;	LDA CM_SFXNOISE-3,Y
;	CMP #2
;	BCS !N0
;	ADC CM_TEMP1
;!N0
;	STA $400E
;
;;consts
;
;	LDY #$00
;	STY $4003
;	DEY
;	STY $4007
;	STY $400F
;
;	LDA #$15;F
;	STA $400C
;
;
;;pre-circle or post circle?
;
;	CPX #CM_NOISESTART
;	BCC !670
;
;
;;post-circle...
;
;;saw ping freq
;
;	LDA #$30
;	STA $4002
;
;
;;fading saw ping
;
;	TXA
;	SEC
;	SBC #CM_NOISESTART-8
;	EOR #$FF
;	LSR
;	LSR
;
;	CMP #$30
;	BCS !11
;	LDA #$00
;!11
;	ORA #$10+$80
;	STA $4000
;
;;cut off noise
;
;	CPX #CM_NOISELEN
;	BCC !600
;
;	LDA #$10
;	STA $400C
;
;	BNE !600
;
;;pre-circle...
;
;!670
;
;;saws
;	TXA
;	LSR
;	ORA #$10+$80
;	STA $4000
;	STA $4004
;
;	TXA
;	ASL
;	ASL
;	ASL
;	STA $4002
;	STA $4006
;
;	LDA #$02
;	CLC
;	ADC CM_TEMP1
;	STA $4003
;	STA $4007
;
;!600
;
;
;
;;timeout?
;
;	LDA CM_FRAMES
;	;CMP #$E0
;	BEQ !TIMEOUT
;
;	BIT CM_FLAGS
;	BVC !CM_LOOP
;
;	CMP #$40
;	BCC !CM_LOOP
;
;	LDY #1
;	STY $4016
;	DEY
;	STY $4016
;
;	LDY #8
;!J1	LDA $4016
;	ORA $4017
;	LSR
;	BCS !TIMEOUT
;	DEY
;	BNE !J1
;!CM_LOOP	JMP CM_LOOP
;
;!TIMEOUT
;	LDA #$00
;	STA $2000
;	STA $2001
;	STA $4015
;
;	IF CM_USERNMI
;	LDA CM_FLAGS
;	ORA #$80
;	STA CM_FLAGS
;	ENDIF
;
;;return to caller (game)
;
;	RTS
;
;
;
;;CM_NMI
;;	IF CM_USERNMI
;;	BIT CM_FLAGS
;;	BPL !1
;;	JMP $C007
;;!1
;;	ENDIF
;;
;;	INC CM_FRAMES
;;	BIT $2002
;;	RTI
;
;
;
;CM_VBLANK	;vblank doings
;
;	LDA CM_FRAMES
;!1	CMP CM_FRAMES
;	BEQ !1
;
;;palette
;	LDX #$00
;	LDA #$3F
;	STA $2006
;	STX $2006
;
;	LDY #$04
;!P2	LDX #$07
;!P1	LDA CM_PALETTE,X
;	STA $2007
;	DEX
;	BPL !P1
;	DEY
;	BNE !P2
;
;
;;colour-fade-in
;
;	LDX CM_COLINDX
;
;	LDY #$3F
;	STY $2006
;	LDA #$11
;	STA $2006
;
;	LDA CM_COLFADE,X
;	BMI !EOF
;	STA $2007
;	LDA CM_COLFADE+1,X
;	STA $2007
;	LDA CM_COLFADE+2,X
;	STA $2007
;
;	;LDY #$3F
;	STY $2006
;	LDY #$03
;	STY $2006
;	STA $2007
;
;	STA $2007
;	STA $2007
;	STA $2007
;	STA $2007
;
;	LDY #$3F
;	STY $2006
;	LDY #$1B
;	STY $2006
;	STA $2007
;
;	INX
;	INX
;	INX
;
;	DEC CM_TIME
;	BNE !EOF
;	INC CM_TIME
;	STX CM_COLINDX
;!EOF
;
;
;;write one more column of 'MASTERS' characters
;
;CM_STRIP
;
;	LDA #$04
;	STA $2000
;
;
;	LDA #$21
;	STA $2006
;	LDA CM_STADRL
;	STA $2006
;	INC CM_STADRL
;
;	LDX CM_STINDX
;	LDY CM_STDATA,X
;	DEY
;	BPL !DONE
;
;
;!2	LDA $2007
;	DEY
;	BMI !2
;
;!1	INX
;	LDA CM_STDATA,X
;	BMI !3
;	STA $2007
;	BPL !1
;
;!3
;	STX CM_STINDX
;!DONE
;
;
;;write 'Code' as characters when ready
;
;
;CM_CODEWRITE
;
;	LDA CM_SXPOS+32
;	CMP #$A1
;	BNE !NC
;
;	LDA #$21
;	STA $2006
;	LDA #$4C
;	STA $2006
;	LDA #$08
;	STA $2007
;
;	LDA #$F4
;	STA CM_ADR1L
;
;	LDY #CM_C1CHR
;	LDX #0
;
;!LOOP2	LDA #$20
;	STA $2006
;	LDA CM_ADR1L
;	STA $2006
;	DEC CM_ADR1L
;
;	LDA CM_CODEMAP,X
;
;!20	ASL
;	BEQ !NEXT2
;	BCC !SKIP
;
;	STY $2007
;	INY
;	BNE !20
;!SKIP
;	BIT $2007
;	BCC !20
;!NEXT2
;	INX
;	CPX #9
;	BNE !LOOP2
;
;!NC
;
;;'TM'
;	LDA #$20
;	STA $2000
;	STA $2006
;	LDA #$F4
;	STA $2006
;	LDX #$8E
;	STX $2007
;	INX
;	STX $2007
;
;
;
;;setup PPU
;
;;
;	LDA #0
;	STA $2003
;	LDA #CM_SPAGE/256
;	STA $4014
;
;	LDA #$81
;	STA $2000
;
;	LDA CM_YSCRPOS
;	BEQ !AT_REST
;	SEC
;	SBC #4
;	STA CM_YSCRPOS
;!AT_REST
;
;	ASL
;	EOR #$FF
;	STA $2005
;	LDA CM_YSCRPOS
;	STA $2005
;
;	LDA #$1E
;	STA $2001
;
;
;;display 'CODE' in scrolly sprites
;
;CM_CODE
;
;CM_C1CHR	EQU 1
;CM_C2CHR	EQU 25
;
;	LDY #0
;
;	LDA CM_CODEXPOS
;	CLC
;	ADC #8
;	CMP #$A9
;	BEQ CM_QUART
;	STA CM_CODEXPOS
;
;	LDA CM_CODEYPOS
;	SEC
;	SBC #4
;	STA CM_CODEYPOS
;
;	LDX #10
;	LDA #CM_C2CHR
;	JSR !CM_CODEPLOT
;
;	LDX #0
;	LDA #CM_C1CHR
;
;!CM_CODEPLOT
;	STA CM_TEMP4
;
;	LDA CM_CODEXPOS
;	STA CM_TEMP1
;
;!LOOP2
;	LDA CM_CODEYPOS
;	STA CM_TEMP2
;	LDA CM_CODEMAP,X
;	BEQ !DONE
;	STA CM_TEMP3
;	INX
;
;!LOOP
;	ASL CM_TEMP3
;	BEQ !NEXT2
;	BCC !NEXT
;	LDA CM_TEMP4
;	INC CM_TEMP4
;
;	STA CM_SDATA,Y
;
;	LDA #$02
;	STA CM_SCTRL,Y
;
;	LDA CM_TEMP1
;	CMP #$E0
;	BCS !DONE
;	STA CM_SXPOS,Y
;
;	LDA CM_TEMP2
;	STA CM_SYPOS,Y
;
;	INY
;	INY
;	INY
;	INY
;
;!NEXT
;	LDA CM_TEMP2
;	CLC
;	ADC #8
;	STA CM_TEMP2
;	BNE !LOOP
;
;!NEXT2
;	LDA CM_TEMP1
;	SEC
;	SBC #8
;	STA CM_TEMP1
;	BNE !LOOP2
;
;
;!DONE
;	RTS
;
;
;
;
;;display circle quarters
;
;CM_QUART
;
;CM_QX	EQU $59
;CM_QY	EQU $2F
;CM_QCHR	EQU 33
;
;	LDA #CM_QCHR
;	STA CM_TEMP4
;
;	LDA #CM_QY
;	STA CM_TEMP2
;
;	LDX #0
;	LDY #32
;
;!LOOP2
;	LDA #CM_QX
;	STA CM_TEMP1
;	LDA CM_QUARTMAP,X
;	STA CM_TEMP3
;	INX
;
;!LOOP
;	ASL CM_TEMP3
;	BCC !NEXT
;	LDA CM_TEMP4
;	INC CM_TEMP4
;
;	STA CM_SDATA,Y
;	STA CM_SDATA+4,Y
;	STA CM_SDATA+8,Y
;	STA CM_SDATA+12,Y
;
;	LDA #$20
;	STA CM_SCTRL,Y
;	LDA #$60
;	STA CM_SCTRL+4,Y
;	LDA #$A0
;	STA CM_SCTRL+8,Y
;	LDA #$E0
;	STA CM_SCTRL+12,Y
;
;	LDA CM_TEMP1
;	STA CM_SXPOS,Y
;	STA CM_SXPOS+8,Y
;	EOR #$FF
;	SEC
;	SBC #$05
;	STA CM_SXPOS+4,Y
;	STA CM_SXPOS+12,Y
;
;	LDA CM_TEMP2
;	STA CM_SYPOS,Y
;	STA CM_SYPOS+4,Y
;	EOR #$FF
;	SEC
;	SBC #$49
;	STA CM_SYPOS+8,Y
;	STA CM_SYPOS+12,Y
;
;	TYA
;	CLC
;	ADC #16
;	TAY
;
;!NEXT
;	LDA CM_TEMP1
;	CLC
;	ADC #8
;	STA CM_TEMP1
;	CMP #CM_QX+8*5
;	BNE !LOOP
;
;	LDA CM_TEMP2
;	CLC
;	ADC #8
;	STA CM_TEMP2
;	CMP #CM_QY+8*6
;	BNE !LOOP2
;
;;done
;	RTS
;
;
;;** Data **
;
;
;CM_SFXNOISE
;	HEX 04060101
;
;CM_NOISESTART	EQU 24
;
;CM_NOISELEN	EQU 56
;
;CM_TRIANGLEN	EQU 44
;
;
;CM_INITTAB	HEX 5C1809F18F
;
;
;CM_STDATA
;	HEX 882F30
;	HEX 8631323334
;	HEX 8535363738
;	HEX 85393A3B
;	HEX 843C3D3E3F40
;	HEX 844142434419
;	HEX 8445464748
;	HEX 83494A4B4C4D
;	HEX 824E4F5051520B
;	HEX 82535455560B
;	HEX 825758590B
;	HEX 825A5B5C
;	HEX 815D5E
;	HEX 80
;
;
;
;CM_COLFADE
;	HEX 040404
;	HEX 040403
;	HEX 040413
;	HEX 031412
;	HEX 021611
;	HEX 011811
;	;HEX 0D2811
;	HEX 80
;
;
;CM_QUARTMAP
;	DB %00111000
;	DB %01111000
;	DB %11100000
;	DB %11000000
;	DB %10000000
;	DB %10000000
;
;CM_CODEMAP
;	DB %00100010
;	DB %00100010
;	DB %01100010
;	DB %11100010
;	DB %01110010
;	DB %01111010
;	DB %01111010
;	DB %01111010
;	DB %00001110
;	DB 0
;
;	DB %00010010
;	DB %00010010
;	DB %00010010
;	DB %00011010
;	DB %00001010
;	DB %00000010
;	DB %00000110
;	DB %00000110
;	DB %00000010
;	DB 0
;
;
;CM_ABMAP
;	HEX 855F606162636465666367006060686363685F696A6B
;	HEX A56C6D6E6F707163727073006D74757070756C767778
;	IF CM_YEAR=1991
;	HEX E5797A7B7C7D7E7F808182838485868788898A8B8C8D
;	ELSE
;	HEX E5797A7B907D7E7F808182838485868788898A8B8C8D
;	ENDIF
;
;
;CM_PALETTE
;	HEX 34241404
;	HEX 11281D04
;
;
;
;
;CM_SHORT = *-CM_LOGO
;;CM_SHORT
;
;
;;***********************************************
;
;
;;CM_CHARACTERS
;;
;;	LDA #$00
;;	STA $2006
;;	STA $2006
;;	LDX #CM_CHRSET&$FF
;;	LDY #CM_CHRSET/256
;;	STX CM_ADR1L
;;	STY CM_ADR1H
;;
;;	;absolutely (c) Copyright Jon Menzies 1990
;;
;;	;CM_ADR1 = packed chrs, data into $2007
;;
;;	LDA #$91
;;	STA CM_TEMP1
;;
;;	;CM_TEMP1=#chrs
;;
;;NULOOP	LDY #0
;;	LDX #8
;;
;;	LDA (CM_ADR1),Y
;;	STA CM_TEMP2
;;	BMI NUCOPY
;;
;;	INY
;;
;;!2	LDA (CM_ADR1),Y
;;	INY
;;	STA $2007
;;	DEX
;;	BEQ !DONE8
;;!3	ASL CM_TEMP2
;;	BPL !2
;;	STA $2007
;;	DEX
;;	BNE !3
;;!DONE8
;;	LDX #8
;;	LDA (CM_ADR1),Y
;;	STA CM_TEMP2
;;	BPL !0B
;;	LDA #0
;;	BEQ !4B
;;!0B	INY
;;!2B	LDA (CM_ADR1),Y
;;!4B	INY
;;	STA $2007
;;	DEX
;;	BEQ NUNEXT
;;!3B	ASL CM_TEMP2
;;	BPL !2B
;;	STA $2007
;;	DEX
;;	BNE !3B
;;NUNEXT
;;	TYA
;;	CLC
;;	ADC CM_ADR1L
;;	STA CM_ADR1L
;;	BCC !RESY
;;	INC CM_ADR1H
;;!RESY
;;	DEC CM_TEMP1
;;	BNE NULOOP
;;
;;	RTS
;;
;;NUCOPY
;;	INY
;;
;;!2	LDA (CM_ADR1),Y
;;	INY
;;	STA $2007
;;	STA CM_NUPZBUF-1,X
;;	DEX
;;	BEQ !DONE8
;;!3	ASL CM_TEMP2
;;	BPL !2
;;	STA $2007
;;	STA CM_NUPZBUF-1,X
;;	DEX
;;	BNE !3
;;!DONE8
;;	LDX #8
;;	LDA (CM_ADR1),Y
;;	STA CM_TEMP2
;;	INY
;;
;;!2B	ASL CM_TEMP2
;;	BCC !NEW
;;	LDA CM_NUPZBUF-1,X
;;	STA $2007
;;	DEX
;;	BNE !2B
;;	JMP NUNEXT
;;
;;!NEW	LDA (CM_ADR1),Y
;;	INY
;;	STA $2007
;;	DEX
;;	BNE !2B
;;	JMP NUNEXT
;;
;;
;;CM_CHRSET	;1597 bytes long
;;
;;	HEX 7F00FF40000739C71E78E0E00638E08000700090EF8801F81077FE7C008050FE
;;	HEX 80003F1F0F4763C1073C00C7E3F1B89C3EF8C37C003CC4FE3826878F0F1F3F02
;;	HEX 797173F3E3E7C6533E3C7C7853CDCB9B977DFFFE6DFFFEFD51FEFCDC880041FD
;;	HEX FBDBAB77FF080030387870C00008FFCFC7878F3FFFFFFFFFFEFFBFFCBE56103E
;;	HEX 1E1C088880C010C5E1E3F7777F3F43C000073FFF403FFFF8C0010F7FE2FFBF3F
;;	HEX 1F0FC0BF5FD7E7E3F3540F87CFDFFF00F3F17978303123D712FFFEFCF8F0E112
;;	HEX FEFDFBF7EFDE08E3C3C68001073F08DCBCB97FFEF8C07200010204FA010355F8
;;	HEX F0E1C355F7EFDEBC4B878F0F1F0B787971F3E7703F7F7E704070CF9E918FBF3B
;;	HEX FEFCF83BFDFBF753F8F0F1FF50F7EFEEE0E8FB3F8000FF03079E78E0C0000FF8
;;	HEX 60800000E081071F79E08000031F7EF8E0800000F0F1F0C000010F7E000F0E0F
;;	HEX 3FFFFEF0803FF800FF03031FFCF0C0001FFCE0000FFCF08000FF0100071F7EF0
;;	HEX C00007FFF8E080007E0003FF70000718E000F8071FFF62003FC0003FF23FFFC0
;;	HEX 700001020408F801030700041820C3071F3F7F0003071F3CFBE7DFBF9F071FFF
;;	HEX 1FF8E71FFFFF7F3F7C000102FE0104102123478F1F3F040F1E1D3B77EFDFFFFF
;;	HEX 7F7F2B020408112B0103070E2F3F7FFF2BDFBF7FFF6F23476F1D3B7F8F7F777D
;;	HEX 0001FF740204050674010302007A000102FE0155040810215503070F1E494347
;;	HEX 878E0E493C387870F0301E1C3CF8E0C073E0C00060000102040810F00103070F
;;	HEX 01202143868E0C19011F1E3C7870F0E040327464E4C8CB9750C183030704081F
;;	HEX 9A8000FF42FFDF8E04004002FFCFAE75FBFFBF00C0A1214080881810203F1E3F
;;	HEX 7F77E7EF000001071F3CF0E08003FFFEF8E0C000FCFFFBF3F8F9F5CC18C38303
;;	HEX 0747C718BC7CFCF8B8385DC7C6465D3839B92646C7C6404326B938393F3C0F4F
;;	HEX 5362001F302000FEFFF6F8FE766924E2C0808C0C1C245D3F7F73F3E3481C1000
;;	HEX 030F3C48E3EFFFFCF0C301F0E081071F3FFF000F1F7EF8E0C1071FE0FFFEDC1C
;;	HEX 1810C0FEDD2BE3E7EF0830383C3E3C180008CFC7CBCDCBE7FF0100436F7EF8C1
;;	HEX 0001FFBC9081073EFF9F0873FF07F78C001D7F5CFFFCF8F004FFFCFBF3FBF7CF
;;	HEX 00C0800818303171F100BF7FF7E7CFCE8E0E18713120232F7F188ECEDFDCD081
;;	HEX 00FFFEF8E1C3071F7F000639675E3CF8E387FFFF3F1F3FFEFFFEFCFEFD00FC71
;;	HEX 634F1E3C78F800338E9CB0E1C3871740F1E3E0C0C3C680402E1C1F3F3C397F00
;;	HEX 8001073FFEFCF1E7007FFEF8C005136E988F8F3F7FFF0771C78F3F7FF8FFEF9F
;;	HEX 3FF0E19063CE69FEFC7C3C001D3D7DFB3B9BCBC30018880838E080031F00E777
;;	HEX F7C71F7FFCE0837FFFDFBF7FFF0181072F5FBF5F3FFEFFB7F8FA904822270E0F
;;	HEX 3F7F7E20D8F1F2C3879E9103F080030F3FFF000F7FFCF0C1071F7F0001060810
;;	HEX 2043870E8001070F1F3C78F0001C381C068347860E00E0C0E0F87C3878F0070C
;;	HEX 7CF8C0001FF080007C0020E8FF503870F0C0800057C0800022071F0F0B321A66
;;	HEX 0F1F1B3380727F72223633667C013C3E377363666E00081C7E2E60703870281C
;;	HEX 3E72607038000E3F7677C3E36343091C3E3F6343C34938301018386B18383049
;;	HEX 77662233776B337766093F7F7E080C1C6B7F1C18493E3C10183E691E38303C00
;;	HEX C1C36226242C6878406367666E6C3C38250C04060E1C2F060E0C40393D1C181C
;;	HEX 3F3D6618393D3F09CFDF9F82C3C76BDFC78605C6C28203070E2FC3C7062A1A62
;;	HEX 3FE7676A337E66E600FECCC4646E4EFCE8007C6E66C6C4CCF8F0001C181C0CE8
;;	HEX FC702002381C0C8C9CF87000C2C6C7C3EE6EFC7048C3C2C6FC7C38487060203E
;;	hex 7E7C6B30707E48EECC447CF8306866EEFC7C78087C7060203C7C782B3C30707C
;;	HEX 0A3038706030703B38306000F8DCD8786C46CE8E4C786CCCC4C62518080C1C38
;;	HEX 2F0C1C1801777F6723273773233F37777363498E0C04868E6B868E0C280C0400
;;	HEX 1E0C1E28060E000C1E0CCC0001020100FF8000E31169896911E1FF9000314A39
;;	HEX 081021FF90009848C8488808FF8C000608100806FFF200639463FFB000809BAA
;;	HEX B29AFFF200F14A49FFF000CD584CD8FFD00080CD95998DFFF0004C980C18FF80
;;	HEX 000C12100C02120CFF92000102679262FFC200A020742423FFF200939463FFF0
;;	HEX 00A9B2A3A1FFC4000102820180FF9200C0000C12CCFFBE00088EFF92000141E7
;;	HEX 4947FFFE0040FFE7003911FFE10010B05010FF80008C5242C448901EFF
;;
;;
;
;
;
;CM_CHARACTERS
;
;	lda #14
;	sta bankno
;	lda #cm_chrset0
;	jmp copyblockofcompactedchrs
;
;;	LDA #$00
;;	STA $2006
;;	STA $2006
;;	LDX #CM_CHRSET&$FF
;;	LDY #CM_CHRSET/256
;;	LDA #BANK
;;	JMP PP1_DOWNLOAD2
;
;CM_CHRSET	;was 1598 bytes long
;	;now 1242 bytes long
;
;	INCBIN CMLOGO.PP1
;
;
;
;CM_TOTAL	EQU *-CM_LOGO
;
;
;
;
;
;
;
;
;
;*************************************************************
;
;
;
;*************************************************************
;
;; SMILEY self-test code V1.3
;
;; by Jon Menzies and Gavin Raeburn 3-10-90
;; or
;; by Gavin Raeburn and Jon Menzies 3-10-90
;
;;variable size (eg 64k/128k) update by Jon Menzies 16-2-91
;
;;(extra 13 bytes added to be same length as smileyQ (597 bytes) 7-8-91)
;;extra 15 bytes added to be same length as smileyQ v1.3q (612 bytes) 2-10-91
;
;;BANK_TABLE, SMILEY_LOBANK, and SMILEY_HIBANK must be declared externally
;
;
;SMILEY	;<-- this is the only non-local label defined here
;
;	IF SMILEY_HIBANK > $F
;	ERROR "SMILEY_HIBANK must be $0..$F
;	ENDIF
;
;	IF SMILEY_LOBANK > SMILEY_HIBANK
;	ERROR "SMILEY_LOBANK is greater than SMILEY_HIBANK
;	ENDIF
;
;;define zero page chars used
;
;!TEST_BYTE	EQU $13
;!BANK	EQU $14
;!PAGE	EQU $15
;!PAD1	EQU $16
;!BANK_ON	EQU $17
;!FACE_MASK	EQU $18
;
;	LDX #$20
;!1	LDA !ROM_CHECK-$20,X
;	STA $0,X
;
;	INX
;	BNE !1
;
;	STX $2000
;	STX $2001
;
;;read keypad
;
;	JSR !KEYPAD
;	STY !TEST_BYTE
;
;	LDA !PAD1
;	AND #%10111111
;	CMP #%10111111
;	BNE !NEXT_TEST
;
;;set no. of banks to check
;
;	LDA #SMILEY_HIBANK	;#15
;	STA !BANK
;
;;test 1 - ROM check
;
;	LDA !SMILEY_BANK
;	STA !BANK_ON
;
;	JSR $20
;
;!NEXT_TEST	LDA !PAD1
;	AND #%01111111
;	CMP #%01111111
;	BNE !NO_EQ
;
;	JSR !TEST_2
;
;!NO_EQ	LDA !TEST_BYTE
;	BEQ !EXIT
;
;	AND #4+8
;	BNE !FAILED
;
;	JMP !GOOD_FACE
;
;!FAILED	JMP !BAD_FACE
;
;!EXIT	RTS
;
;
;
;;test 2 - Char RAM test
;
;
;;write to video ram
;
;!TEST_2
;	JSR !TEST2_SET
;
;!TEST1A	LDY #64
;
;!TEST1B	STX $2007
;	INX
;	STX $2007
;	INX
;	STX $2007
;	INX
;	STX $2007
;	INX
;
;	DEY
;	BNE !TEST1B
;	INX
;
;	SEC
;	SBC #1
;	BNE !TEST1A
;
;
;;read video ram
;
;	JSR !TEST2_SET
;
;	LDY $2007
;
;!TEST2A	LDY #64
;
;!TEST2B	CPX $2007
;	BNE !CRAM_FAIL
;	INX
;	CPX $2007
;	BNE !CRAM_FAIL
;	INX
;	CPX $2007
;	BNE !CRAM_FAIL
;	INX
;	CPX $2007
;	BNE !CRAM_FAIL
;	INX
;
;	DEY
;	BNE !TEST2B
;	INX
;
;	SEC
;	SBC #1
;	BNE !TEST2A
;
;
;
;;write to video ram with
;;complement value
;
;	JSR !TEST2_SET
;	LDX #255-37
;
;!TEST3A	LDY #64
;
;!TEST3B	STX $2007
;	DEX
;	STX $2007
;	DEX
;	STX $2007
;	DEX
;	STX $2007
;	DEX
;
;	DEY
;	BNE !TEST3B
;	DEX
;
;	SEC
;	SBC #1
;	BNE !TEST3A
;
;
;
;;read video ram again
;
;	JSR !TEST2_SET
;	LDX #255-37
;
;	LDY $2007
;
;!TEST4A	LDY #64
;
;!TEST4B	CPX $2007
;	BNE !CRAM_FAIL
;	DEX
;	CPX $2007
;	BNE !CRAM_FAIL
;	DEX
;	CPX $2007
;	BNE !CRAM_FAIL
;	DEX
;	CPX $2007
;	BNE !CRAM_FAIL
;	DEX
;
;	DEY
;	BNE !TEST4B
;	DEX
;
;	SEC
;	SBC #1
;	BNE !TEST4A
;
;	LDA #2
;	BNE !STORE_IT
;
;!CRAM_FAIL	LDA #8
;
;!STORE_IT	ORA !TEST_BYTE
;	STA !TEST_BYTE
;	RTS
;
;!TEST2_SET
;	LDA #$20
;	LDX #37
;	LDY #0
;	STY $2006
;	STY $2006
;	RTS
;
;
;
;!KEYPAD	LDX #1
;	STX $4016
;	DEX
;	STX $4016
;
;	LDY #8
;!PAD	LDA $4016
;	LSR
;	ROL !PAD1
;	DEY
;	BNE !PAD
;	RTS
;
;***********************************************************************
;
;;ROM check relocating code
;
;!ROM_CHECK
;	ORG *,$20
;
;;init y
;	LDY #0
;
;!HERE2
;
;;setbank to be checked
;
;	LDA !BANK
;	JSR !SET_BANK
;
;;set up pointers + loop values
;
;	LDA #$40/4
;	STA !PAGE
;
;	LDA #$80	; BANK POINTERS
;	DB $85,!HERE+2	; STA !HERE+2
;	LDA #$90
;	DB $85,!HEREA+2
;	LDA #$A0
;	DB $85,!HEREB+2
;	LDA #$B0
;	DB $85,!HEREC+2
;
;	LDX #0
;	TXA
;
;	CLC
;
;!HERE	ADC $8000,X
;	BCC !HEREA
;	INY
;	CLC
;
;!HEREA	ADC $9000,X
;	BCC !HEREB
;	INY
;	CLC
;
;!HEREB	ADC $A000,X
;	BCC !HEREC
;	INY
;	CLC
;
;!HEREC	ADC $B000,X
;	BCC !HERED
;	INY
;	CLC
;
;!HERED	INX
;	BNE !HERE
;
;	INC !HERE+2
;	INC !HEREA+2
;	INC !HEREB+2
;	INC !HEREC+2
;
;;loop until bank done
;
;	DEC !PAGE
;	BNE !HERE
;
;	LDX !BANK
;	CMP !SMILEY_NAME,X
;	BNE !FAIL_IT
;
;	LDA !BANK
;	DEC !BANK
;	CMP #SMILEY_LOBANK
;	BNE !HERE2
;	;BPL !HERE2
;
;	LDA #1
;
;	CPY !SMILEY_NAME+16
;	BEQ !TEST2_BALLS
;
;!FAIL_IT	LDA #4
;
;!TEST2_BALLS	STA !TEST_BYTE
;
;	LDA !BANK_ON
;
;!SET_BANK	;called from earlier on
;	TAX
;	STA BANK_TABLE,X
;	RTS
;
;	;* REMOVE THESE BYTES AT YOUR PERIL *
;	DS 13,$EA
;	DS 15,$EA
;
;!SMILEY_NAME
;!0	DB "* SMILEY TEST V1.3 "
;
;	IF *-!0 <> 19
;	ERROR "SMILEY TEXT MUST BE 19 BYTES LONG..."
;	ENDIF
;
;!SMILEY_BANK	= *-1
;
;*************************************************************
;
;
;*************************************************************
;
;	ORG *,*
;	ORG *
;
;!GOOD_FACE	LDX #$55
;	LDA #$1A	;green=good
;	BNE !SHOW_FACE
;
;!BAD_FACE	LDX #$AA
;	LDA #$16	;red=bad
;
;
;!SHOW_FACE
;	;A=bg col, X= $55 or $aa
;
;	STX !FACE_MASK
;
;	LDX !TEST_BYTE
;	STX $4400
;
;;set palette colours
;	LDY #$00
;	STY $2001
;
;	LDX #$3F
;	STX $2006
;	STY $2006
;
;	JSR !STORE
;
;	ORA #$30
;	JSR !STORE
;
;	JSR !STORE
;
;	;assume Y=0...
;
;;download 1 solid character
;
;	STY $2006
;	STY $2006
;
;	LDX #16
;	DEY
;!1Q	STY $2007
;	DEX
;	BNE !1Q
;
;;print face
;	LDA #$20
;	STA $2006
;	STX $2006
;
;	TXA
;	LDY #4
;
;!L1	STA $2007
;	INX
;	BNE !L1
;	DEY
;	BNE !L1
;
;
;	LDA #$23
;	STA $2006
;	LDA #$C8
;	STA $2006
;
;	LDY #0
;!L2	LDA !FACE_DATA,Y
;	AND !FACE_MASK
;	STA $2007
;	INY
;	CPY #48
;	BCC !L2
;
;;screen on, sprites off etc.
;	LDX #$00
;	STX $2000
;	STX $2006
;	STX $2006
;	STX $2005
;	STX $2005
;
;	LDA #$0E
;	STA $2001
;
;
;	;assume X=0...
;
;;wait a few seconds
;	LDY #10
;!WAIT	DEC TEMP1
;	BNE !WAIT
;	DEX
;	BNE !WAIT
;	DEY
;	BNE !WAIT
;
;;screen off
;	STY $2001
;
;;it's a wrap!
;	RTS
;
;
;
;
;!STORE	STA $2007
;	STA $2007
;	STA $2007
;	STA $2007
;	RTS
;
;!FACE_DATA	HEX 00C0FCFFFFF00000
;	HEX 40FF87FFB7CF7300
;	HEX 44FFFEB7FFFE7700
;	HEX 44FF07F535CF7700
;	HEX 00CFF9FAFAFD0300
;	HEX 00000F0F0F030000
;
;*************************************************************
;
;SMILEY_SIZE	EQU *-SMILEY
;
;
;
;
;
;	endif





;CM_FRAMES	EQU $00
;	VAR CM_FLAGS,1	;	EQU $0200
;	VAR CM_POWERUP,1	;	EQU $0201
CM_USERNMI	EQU 1
CM_SPAGE	EQU $0300
CM_YEAR	EQU 1993

	if absolutely=1


CM_SYPOS	EQU CM_SPAGE
CM_SDATA	EQU CM_SPAGE+1
CM_SCTRL	EQU CM_SPAGE+2
CM_SXPOS	EQU CM_SPAGE+3


;zero page

CM_STINDX	EQU 1
CM_COLINDX	EQU 2

;keep these 5 bytes in order...!
CM_YSCRPOS	EQU 3
CM_TIME	EQU 4
CM_STADRL	EQU 5
CM_CODEXPOS	EQU 6
CM_CODEYPOS	EQU 7

;;CM_STADRH	EQU 8
;;CM_STCHAR	EQU 9
;;CM_TIMEIN	EQU 10
;;CM_TIMEOUT	EQU 11

CM_TEMP1	EQU 12
CM_TEMP2	EQU 13
CM_TEMP3	EQU 14
CM_TEMP4	EQU 15

CM_ADR1	EQU 16
CM_ADR1L	EQU 16
CM_ADR1H	EQU 17

CM_NUPZBUF	EQU 18	;eight bytes



CM_LOGO
	LDX #$00
	STX $2000
	STX $2001

;powerup/reset detect & set nmi to ours

	LDY #$97

	LDA CM_FLAGS
	AND #$3F
	CMP #4
	ORA #$40
	BCS !POWERUP

	CPY CM_POWERUP
	BEQ !RESET
!POWERUP
	STY CM_POWERUP
	LDA #$00
!RESET
	STA CM_FLAGS

;download characters

	JSR CM_CHARACTERS
;clear
	LDX #$00
!55	LDA #$00
	STA 0,X
	LDA #$FF
	STA CM_SPAGE,X
	INX
	BNE !55

;setup

	LDX #$04
!IN	LDA CM_INITTAB,X
	STA CM_YSCRPOS,X
	DEX
	BPL !IN


;cls

	LDA #$20
	STA $2006
	LDX #$00
	STX $2006
	LDY #$10

	TXA
!CV0	STA $2007
	DEX
	BNE !CV0
	DEY
	BNE !CV0

	;assume X=0...


;print 'AB'

!AB2
	LDA CM_ABMAP,X	;#$22
	BEQ !ABDONE
	STA $2006
	INX
	LDA CM_ABMAP,X
	STA $2006
	INX

	LDY CM_ABMAP,X
	INX

	;LDY #21
!AB1	LDA CM_ABMAP,X
	STA $2007
	INX
	DEY
	BNE !AB1
	BEQ !AB2

;!AB11
	;CPX #21*3
	;BCC !AB2

!ABDONE


;'AB' attr patch

	LDA #$23
	STA $2006
	LDA #$E8
	STA $2006

	LDY #3

	LDA #$50
!AB5	LDX #8
!AB6	STA $2007
	DEX
	BNE !AB6

	LDA #$55

	DEY
	BNE !AB5

;and cmname atr

	LDY #$23
	STY $2006
	LDX #$C2+8
	STX $2006
	STA $2007
	STA $2007
	STA $2007
	STA $2007

;and 'TM' atr

	STY $2006
	LDX #$CD+8
	STX $2006
	LDA #$05
	STA $2007



;sfx setup

	LDX #$13
	LDA #$00
!CSFX	STA $4000,X
	DEX
	BPL !CSFX

;nmi on
	LDA #$80
	STA $2000

;main loop

CM_LOOP
	JSR CM_VBLANK

;sfx
	LDA #$0F
	STA $4015

	LDX CM_FRAMES

	TXA
	AND #1
	STA CM_TEMP1

;noise freq

	CPX #CM_NOISESTART
	BCS !N2
	TXA
	LSR
	BPL !N0
!N2
	TXA
	LSR
	LSR
	LSR
	TAY
	LDA CM_SFXNOISE-3,Y
	CMP #2
	BCS !N0
	ADC CM_TEMP1
!N0
	STA $400E

;consts

	LDY #$00
	STY $4003
	DEY
	STY $4007
	STY $400F

	LDA #$15;F
	STA $400C


;pre-circle or post circle?

	CPX #CM_NOISESTART
	BCC !670


;post-circle...

;saw ping freq

	LDA #$30
	STA $4002


;fading saw ping

	TXA
	SEC
	SBC #CM_NOISESTART-8
	EOR #$FF
	LSR
	LSR

	CMP #$30
	BCS !11
	LDA #$00
!11
	ORA #$10+$80
	STA $4000

;cut off noise

	CPX #CM_NOISELEN
	BCC !600

	LDA #$10
	STA $400C

	BNE !600

;pre-circle...

!670

;saws
	TXA
	LSR
	ORA #$10+$80
	STA $4000
	STA $4004

	TXA
	ASL
	ASL
	ASL
	STA $4002
	STA $4006

	LDA #$02
	CLC
	ADC CM_TEMP1
	STA $4003
	STA $4007

!600



;timeout?

	LDA CM_FRAMES
	;CMP #$E0
	BEQ !TIMEOUT

	BIT CM_FLAGS
	BVC !CM_LOOP

	CMP #$40
	BCC !CM_LOOP

	LDY #1
	STY $4016
	DEY
	STY $4016

	LDY #8
!J1	LDA $4016
	ORA $4017
	LSR
	BCS !TIMEOUT
	DEY
	BNE !J1

!CM_LOOP	JMP CM_LOOP

!TIMEOUT

	LDA #$00
	STA $2000
	STA $2001
	STA $4015

	IF CM_USERNMI
	LDA CM_FLAGS
	ORA #$80
	STA CM_FLAGS
	ENDIF

;return to caller (game)

	RTS



CM_VBLANK	;vblank doings

	LDA CM_FRAMES
!1	CMP CM_FRAMES
	BEQ !1

;palette
	LDX #$00
	LDA #$3F
	STA $2006
	STX $2006

	LDY #$04
!P2	LDX #$07
!P1	LDA CM_PALETTE,X
	STA $2007
	DEX
	BPL !P1
	DEY
	BNE !P2


;colour-fade-in

	LDX CM_COLINDX

	LDY #$3F
	STY $2006
	LDA #$11
	STA $2006

	LDA CM_COLFADE,X
	BMI !EOF
	STA $2007
	LDA CM_COLFADE+1,X
	STA $2007
	LDA CM_COLFADE+2,X
	STA $2007

	;LDY #$3F
	STY $2006
	LDY #$03
	STY $2006
	STA $2007

	STA $2007
	STA $2007
	STA $2007
	STA $2007

	LDY #$3F
	STY $2006
	LDY #$1B
	STY $2006
	STA $2007

	INX
	INX
	INX

	DEC CM_TIME
	BNE !EOF
	INC CM_TIME
	STX CM_COLINDX
!EOF


;write one more column of 'MASTERS' characters

CM_STRIP

	LDA #$04
	STA $2000


	LDA #$21
	STA $2006
	LDA CM_STADRL
	STA $2006
	INC CM_STADRL

	LDX CM_STINDX
	LDY CM_STDATA,X
	DEY
	BPL !DONE


!2	LDA $2007
	DEY
	BMI !2

!1	INX
	LDA CM_STDATA,X
	BMI !3
	STA $2007
	BPL !1

!3
	STX CM_STINDX
!DONE


;write 'Code' as characters when ready


CM_CODEWRITE

	LDA CM_SXPOS+32
	CMP #$A1
	BNE !NC

	LDA #$21
	STA $2006
	LDA #$4C+$40
	STA $2006
	LDA #$08
	STA $2007

	LDA #$F4+$40-$100
	STA CM_ADR1L

	LDY #CM_C1CHR
	LDX #0

!LOOP2	LDA #$20+1
	STA $2006
	LDA CM_ADR1L
	STA $2006
	DEC CM_ADR1L

	LDA CM_CODEMAP,X

!20	ASL
	BEQ !NEXT2
	BCC !SKIP

	STY $2007
	INY
	BNE !20
!SKIP
	BIT $2007
	BCC !20
!NEXT2
	INX
	CPX #9
	BNE !LOOP2

!NC

;'TM'
	LDA #$20+1
	STA $2000
	STA $2006
	LDA #$F4+$40-$100
	STA $2006
	LDX #$8E
	STX $2007
	INX
	STX $2007



;setup PPU

;
	LDA #0
	STA $2003
	LDA #CM_SPAGE/256
	STA $4014

	LDA #$81
	STA $2000

	LDA CM_YSCRPOS
	BEQ !AT_REST
	SEC
	SBC #4
	STA CM_YSCRPOS
!AT_REST

	ASL
	EOR #$FF
	STA $2005
	LDA CM_YSCRPOS
	STA $2005

	LDA #$1E
	STA $2001


;display 'CODE' in scrolly sprites

CM_CODE

CM_C1CHR	EQU 1
CM_C2CHR	EQU 25

	LDY #0

	LDA CM_CODEXPOS
	CLC
	ADC #8
	CMP #$A9
	BEQ CM_QUART
	STA CM_CODEXPOS

	LDA CM_CODEYPOS
	SEC
	SBC #4
	STA CM_CODEYPOS

	LDX #10
	LDA #CM_C2CHR
	JSR !CM_CODEPLOT

	LDX #0
	LDA #CM_C1CHR

!CM_CODEPLOT
	STA CM_TEMP4

	LDA CM_CODEXPOS
	STA CM_TEMP1

!LOOP2
	LDA CM_CODEYPOS
	STA CM_TEMP2
	LDA CM_CODEMAP,X
	BEQ !DONE
	STA CM_TEMP3
	INX

!LOOP
	ASL CM_TEMP3
	BEQ !NEXT2
	BCC !NEXT
	LDA CM_TEMP4
	INC CM_TEMP4

	STA CM_SDATA,Y

	LDA #$02
	STA CM_SCTRL,Y

	LDA CM_TEMP1
	CMP #$E0
	BCS !DONE
	STA CM_SXPOS,Y

	LDA CM_TEMP2
	STA CM_SYPOS,Y

	INY
	INY
	INY
	INY

!NEXT
	LDA CM_TEMP2
	CLC
	ADC #8
	STA CM_TEMP2
	BNE !LOOP

!NEXT2
	LDA CM_TEMP1
	SEC
	SBC #8
	STA CM_TEMP1
	BNE !LOOP2


!DONE
	RTS




;display circle quarters

CM_QUART

CM_QX	EQU $59
CM_QY	EQU $2F+$10
CM_QCHR	EQU 33

	LDA #CM_QCHR
	STA CM_TEMP4

	LDA #CM_QY
	STA CM_TEMP2

	LDX #0
	LDY #32

!LOOP2
	LDA #CM_QX
	STA CM_TEMP1
	LDA CM_QUARTMAP,X
	STA CM_TEMP3
	INX

!LOOP
	ASL CM_TEMP3
	BCC !NEXT
	LDA CM_TEMP4
	INC CM_TEMP4

	STA CM_SDATA,Y
	STA CM_SDATA+4,Y
	STA CM_SDATA+8,Y
	STA CM_SDATA+12,Y

	LDA #$20
	STA CM_SCTRL,Y
	LDA #$60
	STA CM_SCTRL+4,Y
	LDA #$A0
	STA CM_SCTRL+8,Y
	LDA #$E0
	STA CM_SCTRL+12,Y

	LDA CM_TEMP1
	STA CM_SXPOS,Y
	STA CM_SXPOS+8,Y
	EOR #$FF
	SEC
	SBC #$05
	STA CM_SXPOS+4,Y
	STA CM_SXPOS+12,Y

	LDA CM_TEMP2
	STA CM_SYPOS,Y
	STA CM_SYPOS+4,Y
	EOR #$FF
	SEC
	SBC #$A7-CM_QY*2
	STA CM_SYPOS+8,Y
	STA CM_SYPOS+12,Y

	TYA
	CLC
	ADC #16
	TAY

!NEXT
	LDA CM_TEMP1
	CLC
	ADC #8
	STA CM_TEMP1
	CMP #CM_QX+8*5
	BNE !LOOP

	LDA CM_TEMP2
	CLC
	ADC #8
	STA CM_TEMP2
	CMP #CM_QY+8*6
	BNE !LOOP2

;done
	RTS


;** Data **


CM_SFXNOISE
	HEX 04060101

CM_NOISESTART	EQU 24

CM_NOISELEN	EQU 56

CM_TRIANGLEN	EQU 44


CM_INITTAB
	HEX 5C1849F19F
	;HEX 5C1809F18F


CM_STDATA
	HEX 882F30
	HEX 8631323334
	HEX 8535363738
	HEX 85393A3B
	HEX 843C3D3E3F40
	HEX 844142434419
	HEX 8445464748
	HEX 83494A4B4C4D
	HEX 824E4F5051520B
	HEX 82535455560B
	HEX 825758590B
	HEX 825A5B5C
	HEX 815D5E
	HEX 80



CM_COLFADE
	HEX 040404
	HEX 040403
	HEX 040413
	HEX 031412
	HEX 021611
	HEX 011811
	;HEX 0D2811
	HEX 80


CM_QUARTMAP
	DB %00111000
	DB %01111000
	DB %11100000
	DB %11000000
	DB %10000000
	DB %10000000

CM_CODEMAP
	DB %00100010
	DB %00100010
	DB %01100010
	DB %11100010
	DB %01110010
	DB %01111010
	DB %01111010
	DB %01111010
	DB %00001110
	DB 0

	DB %00010010
	DB %00010010
	DB %00010010
	DB %00011010
	DB %00001010
	DB %00000010
	DB %00000110
	DB %00000110
	DB %00000010
	DB 0

chr3
mess93	defb %00000000
	defb %10001100
	defb %01010010
	defb %01000010
	defb %11001110
	defb %01000010
	defb %10010010
	defb %00001100

	defb %00000000
	defb %10001100
	defb %01010010
	defb %01000010
	defb %11001110
	defb %01000010
	defb %10010010
	defb %00001100


CM_ABMAP
	HEX 22C5155F606162636465666367006060686363685F696A6B
	HEX 22E5156C6D6E6F707163727073006D74757070756C767778

	IF CM_YEAR = 1992
	HEX 232515797A7B7C7D7E7F808182838485868788898A8B8C8D
	ELSE
	HEX 232515797A7B907D7E7F808182838485868788898A8B8C8D
	ENDIF




;	HEX 22C5155F606162636465666367006060686363685F696A6B
;	HEX 22E5156C6D6E6F707163727073006D74757070756C767778
;	IF CM_YEAR=1991
;	HEX 232515797A7B7C7D7E7F808182838485868788898A8B8C8D
;	ELSE
;	HEX 232515797A7B907D7E7F808182838485868788898A8B8C8D
;	ENDIF

	;cmname
	HEX 20AA0C916292669394959665666061
	HEX 20CA0C976F9872999A9B9C6372746E
	;HEX 20AA0C9162926693945F6165666061
	;HEX 20CA0C956F967297986C6E6372746E
	HEX 00



CM_PALETTE
	HEX 34241404
	HEX 11281D04




CM_SHORT = *-CM_LOGO
;CM_SHORT


;*******************************************************************

CM_CHARACTERS
;	lda #0
;	sta _vramaddr
;	sta _vramaddr
;	move.val cm_chrset,pp1address
;	jsr PP1_UNPACK
;	lda #<(&90*16)
;	sta _vramaddr
;	lda #>(&90*16)
;	sta _vramaddr
;	ldx #0
;!1	lda chr3,x
;	sta _vramdata
;	inx
;	cpx #16
;	bne !1
;	rts
;
;


	lda #14
	sta bankno
	lda #cm_chrset0
	jsr copyblockofcompactedchrs
	lda #<(&90*16)
	sta _vramaddr
	lda #>(&90*16)
	sta _vramaddr
	ldx #0
!1	lda chr3,x
	sta _vramdata
	inx
	cpx #16
	bne !1
	rts


	;X=bank#, pp1address = packed chrs, data into $2007
	;exit: pp1address=source for next char, temp8=#chars just done

CM_CHRSET	;now 1242 bytes long
	incbin CMLOGO.PP1

CM_TOTAL	EQU *-CM_LOGO



*************************************************************

; SMILEY self-tst code V1.3

; by Jon Menzies and Gavin Raeburn 3-10-90
; or
; by Gavin Raeburn and Jon Menzies 3-10-90

;variable size (eg 64k/128k) update by Jon Menzies 16-2-91

;(extra 13 bytes added to be same length as smileyQ (597 bytes) 7-8-91)
;extra 15 bytes added to be same length as smileyQ v1.3q (612 bytes) 2-10-91

;BANK_TABLE, SMILEY_LOBANK, and SMILEY_HIBANK must be declared externally


SMILEY	;<-- this is the only non-local label defined here

	IF SMILEY_HIBANK > $F
	ERROR "SMILEY_HIBANK must be $0..$F
	ENDIF

	IF SMILEY_LOBANK > SMILEY_HIBANK
	ERROR "SMILEY_LOBANK is greater than SMILEY_HIBANK
	ENDIF

;define zero page chars used

!tst_BYTE	EQU $13
!BANK	EQU $14
!PAGE	EQU $15
!PAD1	EQU $16
!BANK_ON	EQU $17
!FACE_MASK	EQU $18

	LDX #$20
!1	LDA !ROM_CHECK-$20,X
	STA $0,X

	INX
	BNE !1

	STX $2000
	STX $2001

;read keypad

	JSR !KEYPAD
	STY !tst_BYTE

	LDA !PAD1
	AND #%10111111
	CMP #%10111111
	BNE !NEXT_tst

;set no. of banks to check

	LDA #SMILEY_HIBANK	;#15
	STA !BANK

;tst 1 - ROM check

	LDA !SMILEY_BANK
	STA !BANK_ON

	JSR $20

!NEXT_tst	LDA !PAD1
	AND #%01111111
	CMP #%01111111
	BNE !NO_EQ

	JSR !tst_2

!NO_EQ	LDA !tst_BYTE
	BEQ !EXIT

	AND #4+8
	BNE !FAILED

	JMP !GOOD_FACE

!FAILED	JMP !BAD_FACE

!EXIT	RTS



;tst 2 - Char RAM tst


;write to video ram

!tst_2
	JSR !tst2_SET

!tst1A	LDY #64

!tst1B	STX $2007
	INX
	STX $2007
	INX
	STX $2007
	INX
	STX $2007
	INX

	DEY
	BNE !tst1B
	INX

	SEC
	SBC #1
	BNE !tst1A


;read video ram

	JSR !tst2_SET

	LDY $2007

!tst2A	LDY #64

!tst2B	CPX $2007
	BNE !CRAM_FAIL
	INX
	CPX $2007
	BNE !CRAM_FAIL
	INX
	CPX $2007
	BNE !CRAM_FAIL
	INX
	CPX $2007
	BNE !CRAM_FAIL
	INX

	DEY
	BNE !tst2B
	INX

	SEC
	SBC #1
	BNE !tst2A



;write to video ram with
;complement value

	JSR !tst2_SET
	LDX #255-37

!tst3A	LDY #64

!tst3B	STX $2007
	DEX
	STX $2007
	DEX
	STX $2007
	DEX
	STX $2007
	DEX

	DEY
	BNE !tst3B
	DEX

	SEC
	SBC #1
	BNE !tst3A



;read video ram again

	JSR !tst2_SET
	LDX #255-37

	LDY $2007

!tst4A	LDY #64

!tst4B	CPX $2007
	BNE !CRAM_FAIL
	DEX
	CPX $2007
	BNE !CRAM_FAIL
	DEX
	CPX $2007
	BNE !CRAM_FAIL
	DEX
	CPX $2007
	BNE !CRAM_FAIL
	DEX

	DEY
	BNE !tst4B
	DEX

	SEC
	SBC #1
	BNE !tst4A

	LDA #2
	BNE !STORE_IT

!CRAM_FAIL	LDA #8

!STORE_IT	ORA !tst_BYTE
	STA !tst_BYTE
	RTS

!tst2_SET
	LDA #$20
	LDX #37
	LDY #0
	STY $2006
	STY $2006
	RTS



!KEYPAD	LDX #1
	STX $4016
	DEX
	STX $4016

	LDY #8
!PAD	LDA $4016
	LSR
	ROL !PAD1
	DEY
	BNE !PAD
	RTS

***********************************************************************

;ROM check relocating code

!ROM_CHECK
	ORG *,$20

;init y
	LDY #0

!HERE2

;setbank to be checked

	LDA !BANK
	JSR !SET_BANK

;set up pointers + loop values

	LDA #$40/4
	STA !PAGE

	LDA #$80	; BANK POINTERS
	DB $85,!HERE+2	; STA !HERE+2
	LDA #$90
	DB $85,!HEREA+2
	LDA #$A0
	DB $85,!HEREB+2
	LDA #$B0
	DB $85,!HEREC+2

	LDX #0
	TXA

	CLC

!HERE	ADC $8000,X
	BCC !HEREA
	INY
	CLC

!HEREA	ADC $9000,X
	BCC !HEREB
	INY
	CLC

!HEREB	ADC $A000,X
	BCC !HEREC
	INY
	CLC

!HEREC	ADC $B000,X
	BCC !HERED
	INY
	CLC

!HERED	INX
	BNE !HERE

	INC !HERE+2
	INC !HEREA+2
	INC !HEREB+2
	INC !HEREC+2

;loop until bank done

	DEC !PAGE
	BNE !HERE

	LDX !BANK
	CMP !SMILEY_NAME,X
	BNE !FAIL_IT

	LDA !BANK
	DEC !BANK
	CMP #SMILEY_LOBANK
	BNE !HERE2
	;BPL !HERE2

	LDA #1

	CPY !SMILEY_NAME+16
	BEQ !tst2_BALLS

!FAIL_IT	LDA #4

!tst2_BALLS	STA !tst_BYTE

	LDA !BANK_ON

!SET_BANK	;called from earlier on
	TAX
	STA BANKTABLE,X
	RTS

	;* REMOVE THESE BYTES AT YOUR PERIL *
	DS 13,$EA
	DS 15,$EA

!SMILEY_NAME
!0	DB "* SMILEY TEST V1.3 "

	IF *-!0 <> 19
	ERROR "SMILEY TEXT MUST BE 19 BYTES LONG..."
	ENDIF

!SMILEY_BANK	= *-1

*************************************************************


*************************************************************

	ORG *,*
	ORG *

!GOOD_FACE	LDX #$55
	LDA #$1A	;green=good
	BNE !SHOW_FACE

!BAD_FACE	LDX #$AA
	LDA #$16	;red=bad


!SHOW_FACE
	;A=bg col, X= $55 or $aa

	STX !FACE_MASK

	LDX !TST_BYTE
	STX $4400

;set palette colours
	LDY #$00
	STY $2001

	LDX #$3F
	STX $2006
	STY $2006

	JSR !STORE

	ORA #$30
	JSR !STORE

	JSR !STORE

	;assume Y=0...

;download 1 solid character

	STY $2006
	STY $2006

	LDX #16
	DEY
!1Q	STY $2007
	DEX
	BNE !1Q

;print face
	LDA #$20
	STA $2006
	STX $2006

	TXA
	LDY #4

!L1	STA $2007
	INX
	BNE !L1
	DEY
	BNE !L1


	LDA #$23
	STA $2006
	LDA #$C8
	STA $2006

	LDY #0
!L2	LDA !FACE_DATA,Y
	AND !FACE_MASK
	STA $2007
	INY
	CPY #48
	BCC !L2

;screen on, sprites off etc.
	LDX #$00
	STX $2000
	STX $2006
	STX $2006
	STX $2005
	STX $2005

	LDA #$0E
	STA $2001


	;assume X=0...

;wait a few seconds
	LDY #10
!WAIT	DEC TEMP1
	BNE !WAIT
	DEX
	BNE !WAIT
	DEY
	BNE !WAIT

;screen off
	STY $2001

;it's a wrap!
	RTS




!STORE	STA $2007
	STA $2007
	STA $2007
	STA $2007
	RTS

!FACE_DATA	HEX 00C0FCFFFFF00000
	HEX 40FF87FFB7CF7300
	HEX 44FFFEB7FFFE7700
	HEX 44FF07F535CF7700
	HEX 00CFF9FAFAFD0300
	HEX 00000F0F0F030000

*************************************************************

SMILEY_SIZE	EQU *-SMILEY

;** PP1 character set unpacker **
;8 bytes here
;	var PP1_ZBUF,8
;16 bytes here
;	var PP1_TYPES,16
;PP1_FOL1	EQU PP1_TYPES+4
;PP1_FOL2	EQU PP1_TYPES+8
;PP1_FOL3	EQU PP1_TYPES+12


;also define pp1address=pp1addressL,pp1addressH
	zvar pp1address,2
pp1addressl	equ pp1address
pp1addressh	equ pp1address+1  
	zvar pp1temp1,1
	zvar pp1temp2,1
	zvar pp1temp3,1
	zvar pp1temp4,1
	zvar pp1temp5,1
	zvar pp1temp6,1
	zvar pp1temp7,1
	zvar pp1temp8,1


;compactedchrstable
;	;>chrdata,<chrdata,start,len,bank+128 if char
; compchr cm_chrset0
;		defb >cm_chrset,<cm_chrset,0,13
;;-------------------------------
;copyblockofcompactedchrs ;a=set number from table
;	asl
;	asl	;note 64 chrs sets max (256/4)
;	tay
;	lda bankno
;	pha
;	lda compactedchrstable+3,y
;	and #15
;	jsr changebankrou
;
;	lda compactedchrstable+0,y
;	sta pp1addressl
;	lda compactedchrstable+1,y
;	sta pp1addressh
;	lda compactedchrstable+2,y
;	sta pp1temp
;	lda compactedchrstable+3,y
;	asl
;restcopychrs	lda #0
;	adc #0
;	asl pp1temp
;	rol	;*2
;	asl pp1temp
;	rol	;*4
;	asl pp1temp
;	rol	;*8
;	asl pp1temp
;	rol	;*16
;	sta _vramaddr
;	lda pp1temp	
;	sta _vramaddr
;	jsr pp1_unpack
;	pla
;	jmp changebankrou
;;-------------------------------------------
;compactedscreen1
;	lda #&24
;	bne compo
;compactedscreen	;sends full screen  32*32 to &2000
;	lda #&20
;compo	stx pp1addressl
;	sty pp1addressh
;
;	sta _vramaddr
;	lda #0
;	sta _vramaddr
;;-------------------------------------------
;

;PP1_UNPACK
;	;X=bank#, pp1address = packed chrs, data into $2007
;	;exit: pp1address=source for next char, pp1temp8=#chars just done
;
;	LDY #0
;	LDA (pp1address),Y
;	STA pp1temp1
;	STA pp1temp8
;	INY
;	;pp1temp1=#chrs
;
;	LDA #$80
;	STA pp1temp2
;
;;*  do a character  *2
;
;PP1_CHRLOOP
;
;;* new header? *
;
;;get bit into cf
;
;	JSR PP1_GETC
;	BCS PP1_GOTHEADER
;
;;* fetch header *
;
;	LDX #3
;!HL
;;get type
;	JSR PP1_GET2
;	STA PP1_TYPES,X
;	BEQ !T0
;	LSR
;	BEQ !T1
;	BCC !T2
;
;;type 3
;
;!T3	JSR PP1_T3
;	STA PP1_FOL3,X
;	JMP !T0
;
;;type 2
;
;!T2	JSR PP1_T3
;	STA pp1temp3
;	JSR PP1_GETC
;	BCC !T0
;	LDA pp1temp3
;	STA PP1_FOL2,X
;	JMP !T0
;
;;type 1
;
;!T1	JSR PP1_T1
;	STA PP1_FOL1,X
;
;;type 0
;
;!T0
;	DEX
;	BPL !HL
;
;PP1_GOTHEADER
;
;	LDX #7
;PP1_GETLINE	STX pp1temp3
;
;;* line repetition? *
;
;	ASL pp1temp2
;	BCC !Q10
;	BNE PP1_GOTLINE
;	JSR PP1_GETQ
;	BCS PP1_GOTLINE
;!Q10
;
;;* unpack line *
;	JSR PP1_GET2
;	TAX
;
;	STA pp1temp4	;bpl0
;	LSR
;	ORA #2
;	STA pp1temp5	;bpl1
;
;;next pixel
;!NEXT	LDA PP1_TYPES,X
;	BEQ !T0
;	ASL pp1temp2
;	BCC !Q11
;	BNE !T0
;	JSR PP1_GETQ
;	BCS !T0
;!Q11
;	LDA PP1_TYPES,X
;	LSR
;	BEQ !T1
;	BCC !T2
;
;!T3	ASL pp1temp2
;	BCC !Q12
;	BNE !T1
;	JSR PP1_GETQ
;	BCS !T1
;!Q12	ASL pp1temp2
;	BCC !T2B
;	BNE !Q13
;	JSR PP1_GETQ
;	BCC !T2B
;!Q13	LDA PP1_FOL3,X
;	TAX
;	JMP !P
;
;!T2	ASL pp1temp2
;	BCC !T1
;	BNE !Q14
;	JSR PP1_GETQ
;	BCC !T1
;!Q14
;!T2B	LDA PP1_FOL2,X
;	TAX
;	JMP !P
;
;!T1	LDA PP1_FOL1,X
;	TAX
;
;!T0	TXA
;
;!P	LSR
;	ROL pp1temp4
;	LSR
;	ROL pp1temp5
;	BCC !NEXT
;
;PP1_GOTLINE
;
;;* store line *
;
;	LDA pp1temp4
;	STA _vramdata
;
;	LDX pp1temp3
;	LDA pp1temp5
;	STA PP1_ZBUF,X
;	DEX
;	BPL PP1_GETLINE
;
;	LDX #7
;!BPL1	LDA PP1_ZBUF,X
;	STA _vramdata
;	DEX
;	BPL !BPL1
;
;;* next char *
;
;	DEC pp1temp1
;	BEQ !DONE
;	JMP PP1_CHRLOOP
;!DONE
;
;;* done *
;	RTS
;
;
;;** get 1 bit into carry **
;
;PP1_GETC
;	ASL pp1temp2
;	BEQ !H0
;	RTS
;
;!H0
;PP1_GETQ	LDA (pp1address),Y
;	INY
;	BNE !H2
;	INC pp1addressH
;!H2	ROL
;	STA pp1temp2
;	RTS
;
;
;;** get 2 bits into A **
;
;PP1_GET2
;
;;get b1
;	ASL pp1temp2
;	BNE !20
;
;	LDA (pp1address),Y
;	INY
;	BNE !22
;	INC pp1addressH
;!22	ROL
;	STA pp1temp2
;!20
;	ROL
;	AND #1
;;get b2
;	ASL pp1temp2
;	BEQ !21
;
;	ROL	;zf=1 if A=0
;	RTS
;
;!21
;	PHA
;	LDA (pp1address),Y
;	INY
;	BNE !23
;	INC pp1addressH
;!23	ROL
;	STA pp1temp2
;	PLA
;
;	ROL	;zf=1 if A=0
;	RTS
;
;
;;** get info for folcol1 **
;
;PP1_T1	JSR PP1_GETC
;	BCC !T1B
;	LDA PP1_FC1,X	;zf set from A
;	RTS
;!T1B	JSR PP1_GETC
;	BCS !T1C
;	LDA PP1_FC2,X	;zf set from A
;	RTS
;!T1C	LDA PP1_FC3,X	;zf set from A
;	RTS
;
;
;;** get info for folcol2 & folcol3 **
;
;PP1_T3	JSR PP1_T1
;	STA PP1_FOL1,X
;	BEQ !T3.0
;	CMP #2
;	BCC !T3.1
;	BEQ !T3.2
;!T3.3	LDA PP1_F3L,X
;	STA PP1_FOL2,X
;	LDA PP1_F3H,X
;	RTS
;!T3.2	LDA PP1_F2L,X
;	STA PP1_FOL2,X
;	LDA PP1_F2H,X
;	RTS
;!T3.1	LDA PP1_F1L,X
;	STA PP1_FOL2,X
;	LDA PP1_F1H,X
;	RTS
;!T3.0	LDA PP1_F0L,X
;	STA PP1_FOL2,X
;	LDA PP1_F0H,X
;	RTS
;
;
;;** tables **
;
;PP1_FC3	HEX 030303;02
;PP1_FC2	HEX 020201;01
;PP1_FC1	HEX 01000000
;
;PP1_F0L	EQU PP1_FC2
;	;HEX FF020101
;PP1_F0H	EQU PP1_FC3
;	;HEX FF030302
;PP1_F1L	HEX 02FF0000
;PP1_F1H	EQU PP1_FC3
;	;HEX 03FF0302
;PP1_F2L	EQU PP1_FC1
;	;HEX 0100FF00
;PP1_F2H	HEX 0303FF01
;PP1_F3L	EQU PP1_FC1
;	;HEX 010000
;PP1_F3H	EQU PP1_FC2
;	;HEX 020201
;
;
;;** end of pp1pack **
;pp1end
;PP1_SIZE	EQU pp1end-PP1_UNPACK 
;

	endif



